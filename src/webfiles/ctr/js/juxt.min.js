function initPostModules() { function e(e) { function t() { document.getElementById("close-modal-button").click() } var a = e.currentTarget, n = a.getAttribute("data-module-show"), o = a.getAttribute("data-module-hide"), s = a.getAttribute("data-header"), r = a.getAttribute("data-sound"), c = a.getAttribute("data-message"), l = a.getAttribute("data-screenshot"); if (r && cave.snd_playSe(r), n && o) { if (document.getElementById(o).style.display = "none", document.getElementById(n).style.display = "block", document.getElementById("header").style.display = "true" === s ? "block" : "none", l) { var i = document.getElementById("screenshot-button"); cave.capture_isEnabled() || (classList.add(i, "none"), i.onclick = null) } c ? (cave.toolbar_setWideButtonMessage(c), cave.toolbar_setMode(1), cave.toolbar_setButtonType(1), cave.toolbar_setCallback(1, t), cave.toolbar_setCallback(99, t), cave.toolbar_setCallback(8, function () { cave.toolbar_setMode(0), cave.toolbar_setButtonType(0), document.getElementById("submit").click() })) : (cave.toolbar_setMode(0), cave.toolbar_setButtonType(0), cave.toolbar_setCallback(1, back), cave.toolbar_setCallback(99, back)), cave.transition_end(), initNewPost() } } var t = document.querySelectorAll("[data-module-show]"); if (t) for (var a = 0; a < t.length; a++)t[a].onclick = e } function initMorePosts() { var e = document.querySelectorAll(".load-more[data-href]"); if (e) for (var t = 0; t < e.length; t++)e[t].addEventListener("click", function (e) { var t = e.currentTarget; cave.snd_playSe("SE_OLV_OK"), GET(t.getAttribute("data-href"), function (e) { var a = e.responseText; a && 200 === e.status ? (t.parentElement.outerHTML = a, initPosts(), initMorePosts()) : t.parentElement.outerHTML = "" }) }) } function initPosts() { var e = document.querySelectorAll(".post-content[data-href]"); if (e) { for (var t = 0; t < e.length; t++)e[t].addEventListener("click", function (e) { pjax.loadUrl(e.currentTarget.getAttribute("data-href")) }); initYeah(), initSpoilers() } } function initYeah() { function e(e) { var t = e.currentTarget, a = t.getAttribute("data-post"), n = document.getElementById(a), o = document.getElementById("count-" + a); t.disabled = !0; var s = "postID=" + a; classList.contains(t, "selected") ? (classList.remove(t, "selected"), classList.remove(n, "yeah"), o && (o.innerText -= 1), cave.snd_playSe("SE_OLV_CANCEL")) : (classList.add(t, "selected"), classList.add(n, "yeah"), o && (o.innerText = ++o.innerText), cave.snd_playSe("SE_OLV_MII_ADD")), POST("/posts/empathy", s, function (e) { var a = JSON.parse(e.responseText); if (!a || 200 !== a.status) return cave.error_callErrorViewer(155927); t.disabled = !1, o && (o.innerText = a.count) }) } var t = document.querySelectorAll("button[data-post]"); if (t) for (var a = 0; a < t.length; a++)t[a].onclick = e } function initSpoilers() { var e = document.querySelectorAll("button[data-post-id]"); if (e) for (var t = 0; t < e.length; t++)e[t].addEventListener("click", function (e) { var t = e.currentTarget; classList.remove(document.getElementById("post-" + t.getAttribute("data-post-id")), "spoiler"), document.getElementById("spoiler-" + t.getAttribute("data-post-id")).outerHTML = "", cave.snd_playSe("SE_OLV_OK") }) } function initTabs() { function e(e) { e.preventDefault(), cave.transition_begin(); for (var a = e.currentTarget, n = a.children[0], o = 0; o < t.length; o++)classList.contains(t[o], "selected") && classList.remove(t[o], "selected"); classList.add(a, "selected"), GET(n.getAttribute("href") + "?pjax=true", function (e) { var t = e.responseText; t && 200 === e.status && (document.getElementsByClassName("tab-body")[0].innerHTML = t, pjax.history.push(n.href), initPosts(), initMorePosts(), cave.transition_end()) }) } var t = document.querySelectorAll(".tab-button"); if (t) for (var a = 0; a < t.length; a++)t[a].onclick = e } function deletePost(e) { var t = e.getAttribute("data-post"); if (t) { var a = cave.dialog_twoButton("Delete Post", "Are you sure you want to delete your post? This cannot be undone.", "No", "Yes"); a && DELETE("/posts/" + t, function (e) { return e && 200 === e.status ? (console.log(e), alert("Post has been deleted."), window.location.href = e.responseText) : cave.error_callFreeErrorViewer("5980030", "Post was not able to be deleted. Please try again later.") }) } } function reportPost(e) { var t = e.getAttribute("data-post"), a = document.getElementById("report-launcher"), n = document.getElementById("report-form"), o = document.getElementById("report-post-id"); t && a && n && o && (n.action = "/posts/" + t + "/report", o.value = t, a.click()) } function back() { pjax.canGoBack() ? pjax.back() : cave.toolbar_setButtonType(0) } function stopLoading() { -1 === window.location.href.indexOf("/titles/show/first") && (cave.transition_end(), cave.lls_setItem("agree_olv", "1"), cave.toolbar_setActiveButton(3), cave.snd_playBgm("BGM_CAVE_MAIN"), cave.toolbar_setVisible(!0)) } function initAll() { initPosts(), initMorePosts(), initPostModules(), initTabs(), checkForUpdates(), pjax.refresh() } function testOffline() { var e = PostStorage.getAll(), t = JSON.stringify(e, null, "\t"); POST("/test", t, function () { window.alert("sent") }) } function checkForUpdates() { GET("/users/notifications.json", function (e) { var t = JSON.parse(e.responseText), a = t.message_count + t.notification_count; cave.toolbar_setNotificationCount(a) }) } function newText() { classList.remove(document.getElementById("memo-sprite"), "selected"), classList.remove(document.getElementById("post-memo"), "selected"), classList.add(document.getElementById("text-sprite"), "selected"), classList.add(document.getElementById("post-text"), "selected") } function newPainting(e) { e && cave.memo_clear(), classList.remove(document.getElementById("text-sprite"), "selected"), classList.remove(document.getElementById("post-text"), "selected"), classList.add(document.getElementById("memo-sprite"), "selected"), classList.add(document.getElementById("post-memo"), "selected"), cave.memo_open(), setTimeout(function () { cave.memo_hasValidImage() && (document.getElementById("memo").src = "data:image/png;base64," + cave.memo_getImageBmp(), document.getElementById("memo-value").value = cave.memo_getImageBmp()) }, 250) } function newScreenshot(e) { e ? cave.capture_getLowerImage() : cave.capture_getUpperImage() } function follow(e) { var t = e.getAttribute("data-community-id"), a = document.getElementById("followers"); e.disabled = !0; var n = "id=" + t; classList.contains(e, "selected") ? (classList.remove(e, "selected"), cave.snd_playSe("SE_OLV_CANCEL")) : (classList.add(e, "selected"), cave.snd_playSe("SE_OLV_MII_ADD")), POST(e.getAttribute("data-url"), n, function (t) { var n = JSON.parse(t.responseText); if (!n || 200 !== n.status) return cave.error_callErrorViewer(155927); e.disabled = !1, a.innerText = n.count }) } function POST(e, t, a) { cave.transition_begin(); var n = new XMLHttpRequest; n.onreadystatechange = function () { if (4 === this.readyState) return cave.transition_end(), a(this) }, n.open("POST", e, !0), n.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), n.send(t) } function GET(e, t) { var a = new XMLHttpRequest; a.onreadystatechange = function () { if (4 === this.readyState) return t(this) }, a.open("GET", e, !0), a.send() } function DELETE(e, t) { cave.transition_begin(); var a = new XMLHttpRequest; a.onreadystatechange = function () { if (4 === this.readyState) return cave.transition_end(), t(this) }, a.open("DELETE", e, !0), a.send() } var pjax; setInterval(checkForUpdates, 3e4), cave.toolbar_setCallback(1, back), cave.toolbar_setCallback(99, back), cave.toolbar_setCallback(2, function () { cave.toolbar_setActiveButton(2), pjax.loadUrl("/feed") }), cave.toolbar_setCallback(3, function () { cave.toolbar_setActiveButton(3), pjax.loadUrl("/titles") }), cave.toolbar_setCallback(4, function () { cave.toolbar_setActiveButton(4), checkForUpdates(), pjax.loadUrl("/news/my_news") }), cave.toolbar_setCallback(5, function () { cave.toolbar_setActiveButton(5), pjax.loadUrl("/users/me") }), cave.toolbar_setCallback(8, function () { }); var PostStorage = { maxLocalStorageNum: 3, getPosts: function () { return PostStorage.getAll()[0] }, getAll: function () { for (var e = {}, t = cave.lls_getCount(), a = new RegExp("^[0-9]+$"), n = 0, o = 0; o < t; o++) { var s = cave.lls_getKeyAt(o); a.test(s) && (e[s] = cave.lls_getItem(s), n += 1) } return [e, n] }, getCount: function () { return PostStorage.getAll()[1] }, setItem: function (e) { var t = (new Date).getTime(); cave.lls_setItem(String(t), e) }, removeItem: function (e) { var t = JSON.parse(cave.lls_getItem(e)); t && t.screenShotKey && cave.lls_removeItem(t.screenShotKey), cave.lls_removeItem(e) }, hasKey: function (e) { for (var t = cave.lls_getCount(), a = 0; a < t; a++)if (e === cave.lls_getKeyAt(a)) return !0; return !1 }, sweep: function () { var e = PostStorage.getAll(), t = e[0]; if (e[1] > 0) for (var a in t) { var n = JSON.parse(cave.lls_getItem(a)).screenShotKey; n && !PostStorage.hasKey(n) && cave.lls_removeItem(a) } } }, classList = { contains: function (e, t) { return -1 !== e.className.indexOf(t) }, add: function (e, t) { e.className += " " + t }, remove: function (e, t) { e.className = e.className.replace(t, "") } }; document.addEventListener("DOMContentLoaded", function () { pjax = Pjax.init({ elements: "a[data-pjax]", selectors: ["title", "#body"] }), console.debug("Pjax initialized.", pjax), initAll(), stopLoading() }), document.addEventListener("PjaxRequest", function (e) { console.log(e), cave.transition_begin() }), document.addEventListener("PjaxLoaded", function (e) { console.log(e) }), document.addEventListener("PjaxDone", function (e) { initAll(), cave.brw_scrollImmediately(0, 0), pjax.canGoBack() ? cave.toolbar_setButtonType(1) : cave.toolbar_setButtonType(0), cave.transition_end() });
