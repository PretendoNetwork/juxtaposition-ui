<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Juxt Admin Login</title>
    <link rel="stylesheet" type="text/css" href="/css/juxt.css">
</head>
<body>
<div id="id01" class="modal">

    <form class="modal-content animate" id="login" method="post" onsubmit="submitForm(); return false">
        <div class="container">
            <label for="user_id"><b>Username</b></label>
            <input type="text" placeholder="Enter Username" name="user_id" autocomplete="username" required>

            <label for="password"><b>Password</b></label>
            <input type="password" placeholder="Enter Password" name="password" autocomplete="current-password" required>

            <button>Login</button>
        </div>
    </form>
</div>

<script>
    function submitForm() {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", '/login');
        var user_id = document.getElementsByName('user_id')[0].value;
        var password = document.getElementsByName('password')[0].value;

        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                if(xhr.status === 200)
                {
                    setCookie('auth', xmlToJSON.parseString(xhr.responseText).OAuth20[0].access_token[0].token[0]._text)
                    console.log(xmlToJSON.parseString(xhr.responseText).OAuth20[0].access_token[0].token[0]._text);
                    setServiceToken();
                }
                else
                {
                    alert(JSON.parse(xhr.response).message);
                }
            }};

        var data = "user_id=" + user_id + "&password=" + password;

        xhr.send(data);
    }
    function setServiceToken() {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", '/token');

        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.setRequestHeader("X-Nintendo-Client-ID", "a2efa818a34fa16b8afbc8a74eba3eda");
        xhr.setRequestHeader("X-Nintendo-Client-Secret", "c91cdb5658bd4954ade78533a339cf9a");
        xhr.setRequestHeader("X-Nintendo-Title-ID", "000500301001610A");
        xhr.setRequestHeader("Authorization", "Bearer " + getCookie("auth"));

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                if(xhr.status === 200)
                {
                    setCookie('token', xmlToJSON.parseString(xhr.responseText).service_token[0].token[0]._text)
                    console.log(xmlToJSON.parseString(xhr.responseText).service_token[0].token[0]._text);
                    location.assign('/');
                }
                else
                {
                    console.log(xhr.response);
                }
            }};

        xhr.send();
    }

    function setCookie(cname, cvalue) {
        var date = new Date();
        date.setTime(date.getTime() + (60 * 60 * 1000));
        var expires = "expires="+ date.toUTCString();
        let domain = document.location.host.indexOf('miiverse.cc') === -1 ? 'domain=pretendo.cc;' : 'domain=miiverse.cc;';
        document.cookie = cname + "=" + cvalue + ";" + domain +  expires + date.toGMTString();
    }
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return null;
    }

    var xmlToJSON = function () { this.version = "1.3.4"; var e = { mergeCDATA: !0, grokAttr: !0, grokText: !0, normalize: !0, xmlns: !0, namespaceKey: "_ns", textKey: "_text", valueKey: "_value", attrKey: "_attr", cdataKey: "_cdata", attrsAsObject: !0, stripAttrPrefix: !0, stripElemPrefix: !0, childrenAsArray: !0 }, t = new RegExp(/(?!xmlns)^.*:/), r = new RegExp(/^\s+|\s+$/g); return this.grokType = function (e) { return /^\s*$/.test(e) ? null : /^(?:true|false)$/i.test(e) ? "true" === e.toLowerCase() : isFinite(e) ? parseFloat(e) : e }, this.parseString = function (e, t) { return this.parseXML(this.stringToXML(e), t) }, this.parseXML = function (a, n) { for (var s in n) e[s] = n[s]; var l = {}, i = 0, o = ""; if (e.xmlns && a.namespaceURI && (l[e.namespaceKey] = a.namespaceURI), a.attributes && a.attributes.length > 0) { var c = {}; for (i; i < a.attributes.length; i++) { var u = a.attributes.item(i); m = {}; var p = ""; p = e.stripAttrPrefix ? u.name.replace(t, "") : u.name, e.grokAttr ? m[e.valueKey] = this.grokType(u.value.replace(r, "")) : m[e.valueKey] = u.value.replace(r, ""), e.xmlns && u.namespaceURI && (m[e.namespaceKey] = u.namespaceURI), e.attrsAsObject ? c[p] = m : l[e.attrKey + p] = m } e.attrsAsObject && (l[e.attrKey] = c) } if (a.hasChildNodes()) for (var y, d, m, h = 0; h < a.childNodes.length; h++)4 === (y = a.childNodes.item(h)).nodeType ? e.mergeCDATA ? o += y.nodeValue : l.hasOwnProperty(e.cdataKey) ? (l[e.cdataKey].constructor !== Array && (l[e.cdataKey] = [l[e.cdataKey]]), l[e.cdataKey].push(y.nodeValue)) : e.childrenAsArray ? (l[e.cdataKey] = [], l[e.cdataKey].push(y.nodeValue)) : l[e.cdataKey] = y.nodeValue : 3 === y.nodeType ? o += y.nodeValue : 1 === y.nodeType && (0 === i && (l = {}), d = e.stripElemPrefix ? y.nodeName.replace(t, "") : y.nodeName, m = xmlToJSON.parseXML(y), l.hasOwnProperty(d) ? (l[d].constructor !== Array && (l[d] = [l[d]]), l[d].push(m)) : (e.childrenAsArray ? (l[d] = [], l[d].push(m)) : l[d] = m, i++)); else o || (e.childrenAsArray ? (l[e.textKey] = [], l[e.textKey].push(null)) : l[e.textKey] = null); if (o) if (e.grokText) { var x = this.grokType(o.replace(r, "")); null !== x && void 0 !== x && (l[e.textKey] = x) } else e.normalize ? l[e.textKey] = o.replace(r, "").replace(/\s+/g, " ") : l[e.textKey] = o.replace(r, ""); return l }, this.xmlToString = function (e) { try { return e.xml ? e.xml : (new XMLSerializer).serializeToString(e) } catch (e) { return null } }, this.stringToXML = function (e) { try { var t = null; return window.DOMParser ? t = (new DOMParser).parseFromString(e, "text/xml") : (t = new ActiveXObject("Microsoft.XMLDOM"), t.async = !1, t.loadXML(e), t) } catch (e) { return null } }, this }.call({}); "undefined" != typeof module && null !== module && module.exports ? module.exports = xmlToJSON : "function" == typeof define && define.amd && define(function () { return xmlToJSON });
</script>

</body>
</html>
